import os
import time
import sys
import clr

clr.AddReference("C:\\Program Files\\Thorlabs\\Kinesis\\Thorlabs.MotionControl.DeviceManagerCLI.dll")
clr.AddReference("C:\\Program Files\\Thorlabs\\Kinesis\\Thorlabs.MotionControl.GenericMotorCLI.dll")
clr.AddReference("C:\\Program Files\\Thorlabs\\Kinesis\\Thorlabs.MotionControl.GenericPiezoCLI.dll")
clr.AddReference("C:\\Program Files\\Thorlabs\\Kinesis\\ThorLabs.MotionControl.KCube.InertialMotorCLI.dll")
clr.AddReference("C:\\Program Files\\Thorlabs\\Kinesis\\ThorLabs.MotionControl.KCube.PiezoCLI.dll")
clr.AddReference("C:\\Program Files\\Thorlabs\\Kinesis\\Thorlabs.MotionControl.KCube.PositionAlignerCLI.dll.")
clr.AddReference("C:\\Program Files\\Thorlabs\\Kinesis\\ThorLabs.MotionControl.KCube.PiezoStrainGaugeCLI.dll")

from Thorlabs.MotionControl.DeviceManagerCLI import *
from Thorlabs.MotionControl.GenericMotorCLI import *
from Thorlabs.MotionControl.KCube.InertialMotorCLI import *
from Thorlabs.MotionControl.KCube.PiezoCLI import *
from Thorlabs.MotionControl.GenericPiezoCLI import *
from Thorlabs.MotionControl.KCube.PiezoStrainGaugeCLI import *
from Thorlabs.MotionControl.KCube.PositionAlignerCLI import *
from System import Decimal  # necessary for real world units

target_voltage = Decimal(30)  # Target voltage in volts for initialization
step_size = Decimal(2)        # Voltage step size in volts
delay = 0.5          # Delay between steps in seconds

def adjust_voltage(kcube, axis_name):
    """ Adjusts the voltage of a given KCube to the target voltage smoothly. """
    current_voltage = kcube.GetOutputVoltage()

    if current_voltage < target_voltage:
        # Increase voltage in steps of +2V
        while current_voltage < target_voltage:
            current_voltage += step_size
            if current_voltage > target_voltage:
                current_voltage = target_voltage
            kcube.SetOutputVoltage(current_voltage)
            time.sleep(delay)
            actual_voltage = kcube.GetOutputVoltage()
            print(f"{axis_name} Voltage increased to: {actual_voltage} V")

    elif current_voltage > target_voltage:
        # Decrease voltage in steps of -2V
        while current_voltage > target_voltage:
            current_voltage -= step_size
            if current_voltage < target_voltage:
                current_voltage = target_voltage
            kcube.SetOutputVoltage(current_voltage)
            time.sleep(delay)
            actual_voltage = kcube.GetOutputVoltage()
            print(f"{axis_name} Voltage decreased to: {actual_voltage} V")

    print(f"{axis_name} Target voltage reached.")

def adjust_voltage_to_position(kcube, aligner, axis_name):
    """ Adjusts the voltage to reach positionDiff value of 0 in the X or Y direction. """
    min_voltage = Decimal(0)      # Minimum voltage limit
    min_voltage_1 = Decimal(0.1)
    max_voltage = Decimal(60)     # Maximum voltage limit
    max_iterations = 30
    tolerance = 0.01
    delay = 1                   # Delay between steps in seconds
    iteration_count = 0

    current_voltage = kcube.GetOutputVoltage()  # Get current voltage

    while True:  # Keep adjusting until the position is sufficiently close to zero
        position_diff = aligner.Status.PositionDifference.X if axis_name == "X-axis" else aligner.Status.PositionDifference.Y
        if abs(position_diff) <= tolerance:
            break
        elif iteration_count >= max_iterations:
            print(f"{axis_name} Adjustment reached max iterations. Current voltage: {current_voltage} V.")
            break
        elif position_diff < 0:
            current_voltage -= step_size
            if current_voltage < min_voltage_1:  # Ensure voltage doesn't go below the min limit
                current_voltage = min_voltage
        elif position_diff > 0:
            current_voltage += step_size
            if current_voltage > max_voltage:  # Ensure voltage doesn't go above the max limit
                current_voltage = max_voltage
        if current_voltage < min_voltage_1:
            break

        # Set the voltage
        kcube.SetOutputVoltage(current_voltage)

        # Read the actual voltage and print
        actual_voltage = kcube.GetOutputVoltage()
        print(f"{axis_name} Voltage adjusted to: {actual_voltage} V")
        
        # Small delay for smooth adjustment
        time.sleep(delay)

        iteration_count += 1

    if position_diff <= 0.01:
        print(f"{axis_name} Position reached target. Voltage is now {current_voltage} V.")
    else:
        print(f"{axis_name} Position did not reach target. Voltage is now {current_voltage} V.")
    

def main(move):
    try:
        DeviceManagerCLI.BuildDeviceList()

        # Define the Controllers and Aligners serial numbers
        serial_no_kim = "97103046"
        serial_no_qc = "69253622"
        serial_no_Y1 = "29253237"
        serial_no_X1 = "29253216"
        serial_no_Y2 = '29253246'
        serial_no_X2 = '113250437'

        device = KCubeInertialMotor.CreateKCubeInertialMotor(serial_no_kim)
        aligner = KCubePositionAligner.CreateKCubePositionAligner(serial_no_qc)
        kcubeY1 = KCubePiezo.CreateKCubePiezo(serial_no_Y1)
        kcubeX1 = KCubePiezo.CreateKCubePiezo(serial_no_X1)
        kcubeY2 = KCubePiezo.CreateKCubePiezo(serial_no_Y2)
        kcubeX2 = KCubePiezoStrainGauge.CreateKCubePiezoStrainGauge(serial_no_X2)

        device.Connect(serial_no_kim)
        kcubeY1.Connect(serial_no_Y1)
        kcubeX1.Connect(serial_no_X1)
        kcubeY2.Connect(serial_no_Y2)
        kcubeX2.Connect(serial_no_X2)
        time.sleep(0.25)

        mode = kcubeX2.GetPositionControlMode()
        kcubeX2.SetPositionControlMode(mode.OpenLoop)

        # Start polling and enable
        kcubeY1.StartPolling(250)  #250ms polling rate
        time.sleep(5)
        kcubeY1.EnableDevice()
        time.sleep(0.25)  # Wait for device to enable

        kcubeX1.StartPolling(250)  #250ms polling rate
        time.sleep(5)
        kcubeX1.EnableDevice()
        time.sleep(0.25)  # Wait for device to enable

        kcubeY2.StartPolling(250)  #250ms polling rate
        time.sleep(5)
        kcubeY2.EnableDevice()
        time.sleep(0.25)  # Wait for device to enable

        kcubeX2.StartPolling(250)  #250ms polling rate
        time.sleep(5)
        kcubeX2.EnableDevice()
        time.sleep(0.25)  # Wait for device to enable

        ###

        if not kcubeY1.IsSettingsInitialized():
            kcubeY1.WaitForSettingsInitialized(10000)  # 10 second timeout
            assert kcubeY1.IsSettingsInitialized() is True

        if not kcubeX1.IsSettingsInitialized():
            kcubeX1.WaitForSettingsInitialized(10000)  # 10 second timeout
            assert kcubeX1.IsSettingsInitialized() is True

        if not kcubeY2.IsSettingsInitialized():
            kcubeY2.WaitForSettingsInitialized(10000)  # 10 second timeout
            assert kcubeY2.IsSettingsInitialized() is True

        if not kcubeX2.IsSettingsInitialized():
            kcubeX2.WaitForSettingsInitialized(10000)  # 10 second timeout
            assert kcubeX2.IsSettingsInitialized() is True

        if not device.IsSettingsInitialized():
            device.WaitForSettingsInitialized(10000)  # 10 second timeout
            assert device.IsSettingsInitialized() is True

        device_info = device.GetDeviceInfo()
        print(device_info.Description)
        # Start polling and enable channel
        device.StartPolling(250)  #250ms polling rate
        time.sleep(0.25)
        device.EnableDevice()
        time.sleep(0.25)  # Wait for device to enable

        inertial_motor_config = device.GetInertialMotorConfiguration(serial_no_kim)
        device_settings = ThorlabsInertialMotorSettings.GetSettings(inertial_motor_config)
        device_configY1 = kcubeY1.GetPiezoConfiguration(serial_no_Y1)
        device_configX1 = kcubeX1.GetPiezoConfiguration(serial_no_X1)
        device_configY2 = kcubeY2.GetPiezoConfiguration(serial_no_Y2)
        device_configX2 = kcubeX2.GetPiezoConfiguration(serial_no_X2)
        device_settingsY1 = kcubeY1.PiezoDeviceSettings
        device_settingsX1 = kcubeX1.PiezoDeviceSettings
        device_settingsY2 = kcubeY2.PiezoDeviceSettings
        device_settingsX2 = kcubeX2.PiezoDeviceSettings
        chan1 = InertialMotorStatus.MotorChannels.Channel1
        chan2 = InertialMotorStatus.MotorChannels.Channel2
        device_settings.Drive.Channel(chan1).StepRate = 500
        device_settings.Drive.Channel(chan1).StepAcceleration = 100000
        device_settings.Drive.Channel(chan2).StepRate = 500
        device_settings.Drive.Channel(chan2).StepAcceleration = 100000

        device.SetSettings(device_settings, True, True)

        kcubeX1.SetMaxOutputVoltage(Decimal(100.0))
        kcubeY1.SetMaxOutputVoltage(Decimal(100.0))
        kcubeY2.SetMaxOutputVoltage(Decimal(100.0))

        print("Zeroing device")
        device.SetPositionAs(chan1, 0)
        device.SetPositionAs(chan2, 0)

         #---------Aligner Initialization----------

        aligner.Connect(serial_no_qc)
        time.sleep(0.25)
        aligner.StartPolling(250)
        time.sleep(0.25)  # wait statements are important to allow settings to be sent to the device

        aligner.EnableDevice()
        time.sleep(0.25)  # Wait for device to enable

        # Get Device information
        device_info = aligner.GetDeviceInfo()
        print(device_info.Description)

        # Wait for Settings to Initialise
        if not aligner.IsSettingsInitialized():
            aligner.WaitForSettingsInitialized(10000)  # 10 second timeout
            assert aligner.IsSettingsInitialized() is True

        #get Device Configuration
        PositionAlignerTrakConfiguration = aligner.GetPositionAlignerConfiguration(serial_no_qc, PositionAlignerConfiguration.DeviceSettingsUseOptionType.UseDeviceSettings)
        #Not used directly in example but illustrates how to obtain device settings
        currentDeviceSettings = aligner.PositionAlignerDeviceSettings

        time.sleep(1)

        GUISettings.Detectors = 0x01

        #Set the operating mode
        flag = True
        while flag:
            a = "2" #input("Set the Operating Mode: 1.Monitor; 2.Open Loop; 3.Close Loop ")
            if a == "1":
                aligner.SetOperatingMode(PositionAlignerStatus.OperatingModes.Monitor, False)
                flag = False
            elif a == "2":
                aligner.SetOperatingMode(PositionAlignerStatus.OperatingModes.OpenLoop, False)
                flag = False
            elif a == "3":
                aligner.SetOperatingMode(PositionAlignerStatus.OperatingModes.CloseLoop, False)
                flag = False
            else:
                print("Invalid input")

        time.sleep(1)

        #get the type of the detector
        detector = GUISettings.Detectors

        #Display the Voltage or Position
        positionDiff = aligner.Status.PositionDifference
        positionSum = aligner.Status.Sum

        print("X Diff: ",positionDiff.X," V") #For PDQ series, the voltage difference CANNOT be converted to real position.
        print("Y Diff: ",positionDiff.Y," V")

        #-----------Controller Initialization-----------

        # Sets the voltage on the Controllers to 30V (Our "zero point")
        adjust_voltage(kcubeX1, "X-axis")
        adjust_voltage(kcubeY1, "Y-axis")
        adjust_voltage(kcubeY2, "Y-axis")
        adjust_voltage(kcubeX2, "X-axis")

        # Centers laser in quadcell:
        position_diff_x = aligner.Status.PositionDifference.X
        position_diff_y = aligner.Status.PositionDifference.Y

        adjust_voltage_to_position(kcubeX1, aligner, "X-axis")
        adjust_voltage_to_position(kcubeY1, aligner, "Y-axis")

        position_diff_x = aligner.Status.PositionDifference.X
        position_diff_y = aligner.Status.PositionDifference.Y

        print(position_diff_x)
        print(position_diff_y)

        if abs(position_diff_x) > 0.01 or abs(position_diff_y) > 0.01:
            adjust_voltage_to_position(kcubeX2, aligner, "X-axis")
            adjust_voltage_to_position(kcubeY2, aligner, "Y-axis")
        else:
            pass

        # Choose how much to move linear stage:
        new_pos = int(move)
        print(f'Moving to position {new_pos}')
        # Pythonnet will infer which method to use:
        device.MoveTo(chan1, new_pos, 60000)  # 60 second timeout
        print("Move Complete")

        time.sleep(1)

        # Re-center laser in quadcell only using mirror 1
        adjust_voltage_to_position(kcubeX1, aligner, "X-axis")
        adjust_voltage_to_position(kcubeY1, aligner, "Y-axis")

        if abs(position_diff_x) > 0.01 or abs(position_diff_y) > 0.01:
            adjust_voltage_to_position(kcubeX2, aligner, "X-axis")
            adjust_voltage_to_position(kcubeY2, aligner, "Y-axis")
        else:
            pass

        position_diff_x = aligner.Status.PositionDifference.X
        position_diff_y = aligner.Status.PositionDifference.Y

        print(position_diff_x)
        print(position_diff_y)

        if abs(position_diff_x) <= 0.01 and abs(position_diff_y) <= 0.01:
            print('Centered')
        else:
            print('Unable to Center')

        device.StopPolling()
        device.Disconnect()
        kcubeY1.StopPolling()
        kcubeY1.Disconnect()
        kcubeX1.StopPolling()
        kcubeX1.Disconnect()
        kcubeY2.StopPolling()
        kcubeY2.Disconnect()
        kcubeX2.StopPolling()
        kcubeX2.Disconnect()
        aligner.StopPolling()
        aligner.Disconnect(True)

    except Exception as e:
        print(e)

if __name__ == "__main__":
    main(1000)
